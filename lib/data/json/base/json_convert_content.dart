// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:unique_bbs/data/bean/attach_entity.dart';
import 'package:unique_bbs/data/bean/forum_entity.dart';
import 'package:unique_bbs/data/bean/forum_info_entity.dart';
import 'package:unique_bbs/data/bean/group_entity.dart';
import 'package:unique_bbs/data/bean/group_info_entity.dart';
import 'package:unique_bbs/data/bean/message_entity.dart';
import 'package:unique_bbs/data/bean/message_info_entity.dart';
import 'package:unique_bbs/data/bean/post_entity.dart';
import 'package:unique_bbs/data/bean/post_info_entity.dart';
import 'package:unique_bbs/data/bean/report_entity.dart';
import 'package:unique_bbs/data/bean/thread_entity.dart';
import 'package:unique_bbs/data/bean/thread_info_entity.dart';
import 'package:unique_bbs/data/bean/user_entity.dart';
import 'package:unique_bbs/data/bean/user_info_entity.dart';
import 'package:unique_bbs/data/json/attach_entity_helper.dart';
import 'package:unique_bbs/data/json/forum_entity_helper.dart';
import 'package:unique_bbs/data/json/forum_info_entity_helper.dart';
import 'package:unique_bbs/data/json/group_entity_helper.dart';
import 'package:unique_bbs/data/json/group_info_entity_helper.dart';
import 'package:unique_bbs/data/json/message_entity_helper.dart';
import 'package:unique_bbs/data/json/message_info_entity_helper.dart';
import 'package:unique_bbs/data/json/post_entity_helper.dart';
import 'package:unique_bbs/data/json/post_info_entity_helper.dart';
import 'package:unique_bbs/data/json/report_entity_helper.dart';
import 'package:unique_bbs/data/json/thread_entity_helper.dart';
import 'package:unique_bbs/data/json/thread_info_entity_helper.dart';
import 'package:unique_bbs/data/json/user_entity_helper.dart';
import 'package:unique_bbs/data/json/user_info_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case ThreadEntity:
        return threadEntityFromJson(data as ThreadEntity, json) as T;
      case ThreadInfoEntity:
        return threadInfoEntityFromJson(data as ThreadInfoEntity, json) as T;
      case GroupInfoEntity:
        return groupInfoEntityFromJson(data as GroupInfoEntity, json) as T;
      case PostEntity:
        return postEntityFromJson(data as PostEntity, json) as T;
      case MessageInfoEntity:
        return messageInfoEntityFromJson(data as MessageInfoEntity, json) as T;
      case ForumEntity:
        return forumEntityFromJson(data as ForumEntity, json) as T;
      case MessageEntity:
        return messageEntityFromJson(data as MessageEntity, json) as T;
      case UserInfoEntity:
        return userInfoEntityFromJson(data as UserInfoEntity, json) as T;
      case AttachEntity:
        return attachEntityFromJson(data as AttachEntity, json) as T;
      case GroupEntity:
        return groupEntityFromJson(data as GroupEntity, json) as T;
      case UserEntity:
        return userEntityFromJson(data as UserEntity, json) as T;
      case ReportEntity:
        return reportEntityFromJson(data as ReportEntity, json) as T;
      case ForumInfoEntity:
        return forumInfoEntityFromJson(data as ForumInfoEntity, json) as T;
      case PostInfoEntity:
        return postInfoEntityFromJson(data as PostInfoEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case ThreadEntity:
        return threadEntityToJson(data as ThreadEntity);
      case ThreadInfoEntity:
        return threadInfoEntityToJson(data as ThreadInfoEntity);
      case GroupInfoEntity:
        return groupInfoEntityToJson(data as GroupInfoEntity);
      case PostEntity:
        return postEntityToJson(data as PostEntity);
      case MessageInfoEntity:
        return messageInfoEntityToJson(data as MessageInfoEntity);
      case ForumEntity:
        return forumEntityToJson(data as ForumEntity);
      case MessageEntity:
        return messageEntityToJson(data as MessageEntity);
      case UserInfoEntity:
        return userInfoEntityToJson(data as UserInfoEntity);
      case AttachEntity:
        return attachEntityToJson(data as AttachEntity);
      case GroupEntity:
        return groupEntityToJson(data as GroupEntity);
      case UserEntity:
        return userEntityToJson(data as UserEntity);
      case ReportEntity:
        return reportEntityToJson(data as ReportEntity);
      case ForumInfoEntity:
        return forumInfoEntityToJson(data as ForumInfoEntity);
      case PostInfoEntity:
        return postInfoEntityToJson(data as PostInfoEntity);
    }
    return data as T;
  }

  static T fromJsonAsT<T>(json) {
    switch (T.toString()) {
      case 'ThreadEntity':
        return ThreadEntity().fromJson(json) as T;
      case 'ThreadInfoEntity':
        return ThreadInfoEntity().fromJson(json) as T;
      case 'GroupInfoEntity':
        return GroupInfoEntity().fromJson(json) as T;
      case 'PostEntity':
        return PostEntity().fromJson(json) as T;
      case 'MessageInfoEntity':
        return MessageInfoEntity().fromJson(json) as T;
      case 'ForumEntity':
        return ForumEntity().fromJson(json) as T;
      case 'MessageEntity':
        return MessageEntity().fromJson(json) as T;
      case 'UserInfoEntity':
        return UserInfoEntity().fromJson(json) as T;
      case 'AttachEntity':
        return AttachEntity().fromJson(json) as T;
      case 'GroupEntity':
        return GroupEntity().fromJson(json) as T;
      case 'UserEntity':
        return UserEntity().fromJson(json) as T;
      case 'ReportEntity':
        return ReportEntity().fromJson(json) as T;
      case 'ForumInfoEntity':
        return ForumInfoEntity().fromJson(json) as T;
      case 'PostInfoEntity':
        return PostInfoEntity().fromJson(json) as T;
    }
    return null;
  }
}
